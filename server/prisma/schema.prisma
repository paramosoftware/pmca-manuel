generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AppGenderNoun {
  id   Int    @id @default(autoincrement())
  name String @unique

  resources AppResource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppGroup {
  id   Int    @id @default(autoincrement())
  name String @unique

  nameSlug    String? @unique
  description String?

  permissions AppGroupResource[]
  users       AppGroupUser[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model AppGroupResource {
  id         Int @id @default(autoincrement())
  groupId    Int
  resourceId Int

  read   Boolean? @default(true)
  create Boolean? @default(true)
  update Boolean? @default(true)
  delete Boolean? @default(true)
  batch  Boolean? @default(false)

  resource AppResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  group    AppGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppGroupUser {
  id      Int    @id @default(autoincrement())
  groupId Int
  userId  String

  user  AppUserRestricted @relation(fields: [userId], references: [userId], onDelete: Cascade)
  group AppGroup          @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppMedia {
  id   Int    @id @default(autoincrement())
  name String

  originalFilename   String?
  path               String?
  subtitle           String?
  subtitleNormalized String?
  type               String?
  isPublic           Boolean? @default(false)

  entryMedia EntryMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppResource {
  id          Int    @id @default(autoincrement())
  name        String @unique
  namePlural  String
  prismaModel String @unique

  nameSlug     String?  @unique
  description  String?
  genderNounId Int?
  isAppModel   Boolean? @default(false)
  isPublic     Boolean? @default(false)

  groups     AppGroupResource[]
  genderNoun AppGenderNoun?     @relation(fields: [genderNounId], references: [id])

  fields AppResourceField[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model AppResourceField {
  id          Int    @id @default(autoincrement())
  resourceId  Int
  name        String
  prismaField String

  nameNormalized String?

  resource AppResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model AppUser {
  id    String @id @default(uuid())
  login String @unique
  email String @unique
  name  String

  nameNormalized String?

  restricted AppUserRestricted?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  EntryChanges EntryChanges[]
}

// Workaround for lack of an easy way to exclude scalar fields from a model in Prisma
model AppUserRestricted {
  id     String @id @default(uuid())
  userId String @unique

  password  String
  isBlocked Boolean?         @default(false)
  isAdmin   Boolean?         @default(false)
  groups    AppGroupUser[]
  sessions  AppUserSession[]

  user AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppUserSession {
  id     String @id @default(uuid())
  userId String

  refreshToken String @unique

  user AppUserRestricted @relation(fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, refreshToken])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  nameSlug             String? @unique
  definition           String?
  definitionNormalized String?
  nameNormalized       String?
  parentId             Int?

  children Category[] @relation("categories_categories")
  entries  Entry[]
  parent   Category?  @relation("categories_categories", fields: [parentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Entry {
  id          Int    @id @default(autoincrement())
  name        String
  accessCount Int    @default(0)

  definition           String?
  definitionNormalized String?
  nameSlug             String? @unique
  nameNormalized       String?
  notes                String?
  notesNormalized      String?
  categoryId           Int?

  category     Category?      @relation(fields: [categoryId], references: [id])
  changes      EntryChanges[]
  media        EntryMedia[]
  translations Translation[]
  references   Reference[]
  variations   Variation[]

  entries        Entry[] @relation("EntryToEntry")
  relatedEntries Entry[] @relation("EntryToEntry")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EntryChanges {
  id      Int    @id @default(autoincrement())
  entryId Int
  changes String

  userId String?

  user  AppUser? @relation(fields: [userId], references: [id])
  entry Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EntryMedia {
  id      Int @id @default(autoincrement())
  entryId Int
  mediaId Int

  position Int?

  entry Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  media AppMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique

  nameNormalized String?
  abbreviation   String? @unique
  code           String? @unique

  translations Translation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variation {
  id   Int    @id @default(autoincrement())
  name String

  nameNormalized String?

  entryId Int
  entry   Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Translation {
  id         Int    @id @default(autoincrement())
  name       String
  languageId Int
  entryId    Int

  nameNormalized String?

  entry    Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reference {
  id   Int    @id @default(autoincrement())
  name String

  nameNormalized String?

  entries Entry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebPage {
  id       Int    @id @default(autoincrement())
  name     String @unique
  content  String
  menuName String

  contentNormalized String?
  nameSlug          String? @unique
  nameNormalized    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
