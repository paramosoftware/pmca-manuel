generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AppGroup {
  id   Int    @id @default(autoincrement())
  name String @unique

  nameSlug    String? @unique
  description String?

  permissions AppGroupResource[]
  users       AppGroupUser[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model AppGroupResource {
  id         Int @id @default(autoincrement())
  groupId    Int
  resourceId Int

  read   Boolean? @default(true)
  create Boolean? @default(true)
  update Boolean? @default(true)
  delete Boolean? @default(true)
  batch  Boolean? @default(false)

  resource AppResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  group    AppGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppGroupUser {
  id      Int    @id @default(autoincrement())
  groupId Int
  userId  String

  user  AppUserRestricted @relation(fields: [userId], references: [userId], onDelete: Cascade)
  group AppGroup          @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppMedia {
  id   Int    @id @default(autoincrement())
  name String @unique

  originalFilename   String?
  path               String?
  subtitle           String?
  subtitleNormalized String?
  type               String? 
  isPublic           Boolean? @default(false)

  entryMedia EntryMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppResource {
  id          Int    @id @default(autoincrement())
  name        String @unique 
  label       String 
  labelPlural String 

  nameSlug       String? @unique
  nameNormalized String?
  description    String? 
  genderNoun     String  @default("n") 

  isAppModel Boolean? @default(false) 
  isPublic   Boolean? @default(false) 

  groups AppGroupResource[] 

  fields        AppResourceField[] 
  relatedFields AppResourceField[] @relation("RelatedFields")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model AppResourceField {
  id         Int    @id @default(autoincrement())
  resourceId Int
  name       String 
  label      String 
  valueType  String @default("string")
  uiField    String @default("input")
  position   Int    @default(0)

  inputType       String?  @default("text") 
  nameNormalized  String?
  labelNormalized String?
  placeholder     String? 
  defaultValue    String?
  defaultOptions  String?
  query           String?
  max             Int?
  richText        Boolean? @default(false)
  hierarchal      Boolean? @default(false)
  required        Boolean? @default(false)
  hidden          Boolean? @default(false)
  disabled        Boolean? @default(false)
  allowCreate     Boolean? @default(true)
  allowMultiple   Boolean? @default(true)

  relatedResourceId Int?
  relatedResource AppResource? @relation(fields: [relatedResourceId], references: [id], onDelete: Cascade, name: "RelatedFields")
  resource        AppResource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([resourceId, name])
}

model AppUser {
  id    String @id @default(uuid())
  login String @unique
  email String @unique
  name  String

  nameNormalized String?

  restricted AppUserRestricted?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  EntryChanges EntryChanges[]
}

// Workaround for lack of an easy way to exclude scalar fields from a model in Prisma
model AppUserRestricted {
  id     String @id @default(uuid())
  userId String @unique

  password  String
  isBlocked Boolean?         @default(false)
  isAdmin   Boolean?         @default(false)
  groups    AppGroupUser[]
  sessions  AppUserSession[]

  user AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppUserSession {
  id     String @id @default(uuid())
  userId String

  refreshToken String @unique

  user AppUserRestricted @relation(fields: [userId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, refreshToken])
}

model Entry {
  id          Int     @id @default(autoincrement())
  name        String
  accessCount Int     @default(0)
  isCategory  Boolean @default(false)

  definition           String?
  definitionNormalized String?
  nameSlug             String? @unique
  nameNormalized       String?
  notes                String?
  notesNormalized      String?
  parentId             Int?

  changes      EntryChanges[]
  media        EntryMedia[]
  translations Translation[]
  references   Reference[]
  variations   Variation[]

  entries        Entry[] @relation("EntryToEntry")
  relatedEntries Entry[] @relation("EntryToEntry")
  children       Entry[] @relation("EntryToChildren")
  parent         Entry?  @relation("EntryToChildren", fields: [parentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EntryChanges {
  id      Int    @id @default(autoincrement())
  entryId Int
  changes String

  userId String?

  user  AppUser? @relation(fields: [userId], references: [id])
  entry Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EntryMedia {
  id      Int @id @default(autoincrement())
  entryId Int
  mediaId Int

  position Int?

  entry Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  media AppMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique

  nameNormalized String?
  languageCode   String? @unique

  translations Translation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variation {
  id   Int    @id @default(autoincrement())
  name String

  nameNormalized String?

  entryId Int
  entry   Entry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Translation {
  id         Int    @id @default(autoincrement())
  name       String
  languageId Int
  entryId    Int

  nameNormalized String?

  entry    Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reference {
  id   Int    @id @default(autoincrement())
  name String @unique

  nameNormalized String?

  entries Entry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebPage {
  id       Int    @id @default(autoincrement())
  name     String @unique
  content  String
  menuName String

  contentNormalized String?
  nameSlug          String? @unique
  nameNormalized    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
