// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Category { 
  id        Int          @id @default(autoincrement())
  name      String       @unique
  nameNormalized String? @unique  
  definition String?
  definitionNormalized String?           

  children  Category[]   @relation("SubCategories")
  parent    Category?    @relation("SubCategories", fields: [parentId], references: [id])
  parentId  Int?

  entries   Entry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}


model Entry {
  id                          Int      @id @default(autoincrement())
  slug                        String   @unique
  name                        String   @unique
  nameNormalized              String?  @map("name_normalized")
  definition                  String?
  definitionNormalized        String?  @map("definition_normalized")
  notes                       String?
  notesNormalized             String?  @map("notes_normalized")
  accessCount                 Int      @default(0) @map("access_count")
 
  references      Reference[] @relation("entries_references")

  media           EntryMedia[]
  
  variations      Variation[]
  translations    Translation[]

  entries         Entry[]   @relation("entries_entries")
  relatedEntries  Entry[]   @relation("entries_entries")

  categoryId      Int?       @map("category_id")
  category        Category?  @relation(fields: [categoryId], references: [id])

  entryChanges    EntryChanges[]

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("entries")
}

model EntryChanges {
  id          Int       @id @default(autoincrement())
  entryId     Int       @map("entry_id")
  entry       Entry     @relation(fields: [entryId], references: [id])

  userId      Int       @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  changes     String    @map("changes")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("entries_changes")
}

model EntryMedia {
  id          Int       @id @default(autoincrement())
  
  entryId     Int       @map("entry_id")
  entry       Entry     @relation(fields: [entryId], references: [id])

  mediaId     Int       @map("media_id")
  media       Media     @relation(fields: [mediaId], references: [id])

  position    Int?

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("entries_media")
}

model Language {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  nameNormalized String?  @map("name_normalized")
  abbreviation  String?   @unique
  code          String?   @unique

  translations  Translation[]

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("languages")
}


model Media {
  id          Int       @id @default(autoincrement())
  name        String
  path        String?
  subtitle    String?
  subtitleNormalized String? @map("subtitle_normalized")

  private     Boolean?   @default(false)
  // TODO: create a media type model
  type        String?

  entries     EntryMedia[]

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("media")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique @map("email") 
  name          String      @unique @default("")
  nameNormalized String?    @map("name_normalized")

  password      String   

  role          String?      @default("1")

  refreshToken  String?     @unique @map("refresh_token")

  EntryChanges  EntryChanges[]

  createdAt     DateTime?   @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")

  @@map("users")
}
  
model Variation {
  id          Int       @id @default(autoincrement())
  name        String
  nameNormalized String? @map("name_normalized")

  entryId     Int       @map("entry_id")
  entry       Entry     @relation(fields: [entryId], references: [id])

  @@map("variations")
}

model Translation {
  id          Int       @id @default(autoincrement())
  name        String
  nameNormalized String? @map("name_normalized")

  languageId  Int
  language    Language  @relation(fields: [languageId], references: [id])

  entryId     Int       @map("entry_id")
  entry       Entry     @relation(fields: [entryId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("translations")
}

model Reference {
  id          Int       @id @default(autoincrement())
  name        String
  nameNormalized String? @map("name_normalized")
  
  entries     Entry[]   @relation("entries_references")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("references")
}


model WebPage {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  nameNormalized String? @map("name_normalized")
  menuName    String    @map("menu_name")

  slug        String    @unique

  content     String
  contentNormalized String? @map("content_normalized")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("web_pages")
}
